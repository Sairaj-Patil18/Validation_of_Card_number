#By Implimenting Luhn Algorithm check card number is valid or not 


def verify_card_number(card_number):
    sum_of_odd_digits = 0
    #accessing every 2nd digit from first 4digit of card
    # card_number_reversed = card_number[0:4:2]
    #STEP 1 : Reversing card number (RIGHT TO LEFT)
    card_number_reversed = card_number[::-1]
    #variable that contain every other digit of card_number_reversed
    odd_digits = card_number_reversed[::2]
    
    for digit in odd_digits:
        sum_of_odd_digits += int(digit)
    
    #sum of even digit 
    sum_of_even_digits = 0
    even_digits = card_number_reversed[1::2]
    #STEP 2: access every even number and multiply by 2
    for digit in even_digits:
        number = int(digit) * 2
    # if the number is greater than 10 then we have to add 1st and 2nd digits of number
        if number>=10:
            #number//10 gives 1st digit and number%10 gives 2nd digit
            number = number//10 + number%10
        sum_of_even_digits += number    
    #STEP 3: calculate sum of odd and even digits sum
    total = sum_of_odd_digits + sum_of_even_digits
    # print(total)
    #STEP 4 : check and return 0 if total divided by 10 (so it is consider as VALID NO)
    return 0 == total % 10      
    



#define main function
def main():
    card_number = '4111-1111-4555-1142'
#used str class and maketrans method so it replace - with '' and ' ' with ''
    card_translation = str.maketrans({'-': '', ' ': ''})
#to translate card_number variable as per card_translation
    translated_card_number = card_number.translate(card_translation)
    
    # print(translated_card_number)
    if verify_card_number(translated_card_number):
        print("VALID!")
    else:
        print('INVALID!')    

main()
